<!DOCTYPE html>
<html lang="en" class="light">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Cybersecurity Breach Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    html.dark body { background-color: #1a202c; color: #f7fafc; }
    html.dark table { background-color: #2d3748; }
    html.dark .bg-white { background-color: #2d3748 !important; }
    html.dark .text-gray-700 { color: #e2e8f0 !important; }
    html.dark .text-gray-500 { color: #a0aec0 !important; }
  </style>
</head>
<body class="p-6 transition-colors duration-300">
  <div class="max-w-7xl mx-auto">
    <h1 class="text-3xl font-bold mb-4 text-center">Cybersecurity Breach Dashboard</h1>

    <!-- Today Summary -->
    <div id="todaySummary" class="mb-4 p-4 border-l-4 border-blue-500 bg-blue-100 dark:bg-blue-900 rounded hidden"></div>
    <div class="flex justify-between items-center mb-4">
      <button onclick="copySummary()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">üìã Copy Summary</button>
      <button onclick="exportToCSV()" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">üìÅ Export to CSV</button>
      <button onclick="toggleDarkMode()" class="bg-gray-200 dark:bg-gray-700 text-black dark:text-white px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">üåô Toggle Dark Mode</button>
      <button onclick="resetFilters()" class="bg-gray-200 dark:bg-gray-700 text-black dark:text-white px-4 py-2 rounded hover:bg-gray-300 dark:hover:bg-gray-600">Reset Filters</button>
    </div>

    <!-- Filters -->
    <div class="mb-6 grid grid-cols-1 md:grid-cols-4 gap-4">
      <div><label class="block text-sm font-medium text-gray-700">Location</label><select id="locationFilter" class="mt-1 block w-full p-2 border rounded"><option value="">All</option><option value="USA">USA</option><option value="EU">EU</option><option value="Asia">Asia</option><option value="Global">Global</option></select></div>
      <div><label class="block text-sm font-medium text-gray-700">Attacker</label><select id="attackerFilter" class="mt-1 block w-full p-2 border rounded"><option value="">All</option><option value="Cybercriminal">Cybercriminal</option><option value="Nation-State">Nation-State</option><option value="Hacktivist">Hacktivist</option><option value="Unknown">Unknown</option></select></div>
      <div><label class="block text-sm font-medium text-gray-700">Date (after)</label><input type="date" id="dateFilter" class="mt-1 block w-full p-2 border rounded"></div>
      <div><label class="block text-sm font-medium text-gray-700">Method</label><select id="methodFilter" class="mt-1 block w-full p-2 border rounded"><option value="">All</option><option value="Phishing">Phishing</option><option value="Ransomware">Ransomware</option><option value="SQL Injection">SQL Injection</option><option value="DDoS">DDoS</option><option value="XSS">XSS</option></select></div>
    </div>

    <!-- Table -->
    <div class="bg-white shadow rounded-lg overflow-x-auto mb-6">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50 dark:bg-gray-800"><tr><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Rank</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Company</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Location</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Breach Count</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Last Breach</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Attacker</th><th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Method</th></tr></thead>
        <tbody id="breachTable" class="divide-y divide-gray-200 dark:divide-gray-600"></tbody>
      </table>
    </div>

    <!-- Chart -->
    <div class="bg-white shadow rounded-lg p-6"><canvas id="breachChart" height="100"></canvas></div>
    <audio id="notificationSound" src="https://actions.google.com/sounds/v1/alarms/beep_short.ogg" preload="auto"></audio>
  </div>

  <script>
    let breachData = [];
    let breachChartInstance = null;
    const knownOrgs = ["Google", "Microsoft", "FBI", "ChatGPT", "Reddit", "T-Mobile", "Meta", "Apple", "Cisco", "Samsung", "Amazon", "AT&T", "Equifax"];
    function extractCompany(title) {
      for (const org of knownOrgs) if (title.toLowerCase().includes(org.toLowerCase())) return org;
      return title.split(" ").slice(0, 3).join(" ");
    }
    function detectLocation(text) {
      const t = text.toLowerCase();
      if (t.includes("usa") || t.includes("america") || t.includes(".us") || t.includes("u.s.")) return "USA";
      if (t.includes("uk") || t.includes("england") || t.includes("britain") || t.includes(".co.uk")) return "EU";
      if (t.includes("germany") || t.includes("france") || t.includes("europe")) return "EU";
      if (t.includes("china") || t.includes("japan") || t.includes("india") || t.includes("asia") || t.includes(".cn") || t.includes(".in")) return "Asia";
      if (t.includes("australia")) return "Asia";
      return "Global";
    }
    async function fetchRSSFeed(url) {
      const proxyUrl = `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(url)}`;
      const response = await fetch(`https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(url)}`);
      const json = await response.json();
      return json.items || [];
    }
    async function fetchAllFeeds() {
      
    const feedSourceUrl = "feeds.json";
    let feeds = [];
    try {
      const res = await fetch(feedSourceUrl);
      feeds = await res.json();
    } catch (err) {
      console.error("Failed to load feeds.json:", err);
    }
    
      let items = [];
      try {
        const results = await Promise.all(feeds.map(fetchRSSFeed));
        results.forEach(feedItems => items.push(...feedItems));
      } catch (err) { console.error("Feed load error:", err); }
      breachData = items.map(item => ({
        company: extractCompany(item.title),
        location: detectLocation(item.title + " " + item.link),
        breachCount: 1,
        lastBreach: new Date(item.pubDate || item.date || Date.now()).toISOString().split("T")[0],
        attacker: "Unknown",
        method: "Unknown",
        link: item.link || "#",
        title: item.title
      }));
      breachData.sort((a, b) => new Date(b.lastBreach) - new Date(a.lastBreach));
      showTodaySummary(breachData);
      populateTable(breachData);
      updateChart(breachData);
    }
    function populateTable(data) {
      const tableBody = document.getElementById('breachTable');
      tableBody.innerHTML = '';
      if (data.length === 0) {
        tableBody.innerHTML = `<tr><td colspan="7" class="px-6 py-4 text-center text-gray-500">No breaches found.</td></tr>`; return;
      }
      data.forEach((entry, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td class="px-6 py-4">${index + 1}</td>
          <td class="px-6 py-4"><a href="${entry.link}" target="_blank" title="${entry.title}" class="text-blue-600 underline">${entry.company}</a></td>
          <td class="px-6 py-4">${entry.location}</td>
          <td class="px-6 py-4">${entry.breachCount}</td>
          <td class="px-6 py-4">${entry.lastBreach}</td>
          <td class="px-6 py-4">${entry.attacker}</td>
          <td class="px-6 py-4">${entry.method}</td>`;
        tableBody.appendChild(row);
      });
    }
    function updateChart(data) {
      const ctx = document.getElementById('breachChart').getContext('2d');
      if (breachChartInstance) breachChartInstance.destroy();
      breachChartInstance = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: data.map(e => e.company),
          datasets: [{ label: 'Breach Count', data: data.map(e => e.breachCount), backgroundColor: 'rgba(59, 130, 246, 0.5)', borderColor: 'rgba(59, 130, 246, 1)', borderWidth: 1 }]
        },
        options: { responsive: true, maintainAspectRatio: false, scales: { y: { beginAtZero: true } } }
      });
    }
    function showTodaySummary(data) {
      const today = new Date().toISOString().split("T")[0];
      const todayItems = data.filter(d => d.lastBreach === today);
      const summaryDiv = document.getElementById("todaySummary");
      if (todayItems.length > 0) {
        summaryDiv.classList.remove("hidden");
        document.getElementById("notificationSound").play();
        summaryDiv.innerHTML = `<strong>üö® ${todayItems.length} new breach${todayItems.length > 1 ? "es" : ""} today:</strong><ul class="mt-2 list-disc list-inside">${todayItems.map(d => `<li><a href="${d.link}" target="_blank" class="underline">${d.title}</a></li>`).join("")}</ul>`;
      } else { summaryDiv.classList.add("hidden"); }
    }
    function filterData() {
      const loc = locationFilter.value, att = attackerFilter.value, date = dateFilter.value, meth = methodFilter.value;
      let filtered = breachData;
      if (loc) filtered = filtered.filter(e => e.location === loc);
      if (att) filtered = filtered.filter(e => e.attacker === att);
      if (date) filtered = filtered.filter(e => e.lastBreach >= date);
      if (meth) filtered = filtered.filter(e => e.method === meth);
      populateTable(filtered);
      updateChart(filtered);
    }
    function resetFilters() {
      locationFilter.value = attackerFilter.value = dateFilter.value = methodFilter.value = '';
      populateTable(breachData);
      updateChart(breachData);
    }
    function toggleDarkMode() {
      document.documentElement.classList.toggle("dark");
    }
    function copySummary() {
      const text = document.getElementById("todaySummary").innerText;
      navigator.clipboard.writeText(text).then(() => alert("Summary copied to clipboard!"));
    }
    function exportToCSV() {
      const rows = [["Company", "Location", "Breach Count", "Last Breach", "Attacker", "Method"]];
      breachData.forEach(e => rows.push([e.company, e.location, e.breachCount, e.lastBreach, e.attacker, e.method]));
      const csvContent = "data:text/csv;charset=utf-8," + rows.map(e => e.join(",")).join("\n");
      const encodedUri = encodeURI(csvContent);
      const link = document.createElement("a");
      link.setAttribute("href", encodedUri);
      link.setAttribute("download", "breaches.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
    document.getElementById('locationFilter').addEventListener('change', filterData);
    document.getElementById('attackerFilter').addEventListener('change', filterData);
    document.getElementById('dateFilter').addEventListener('change', filterData);
    document.getElementById('methodFilter').addEventListener('change', filterData);
    fetchAllFeeds();
    setInterval(fetchAllFeeds, 10 * 60 * 1000);
  </script>
</body>
</html>
